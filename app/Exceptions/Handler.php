<?php

namespace App\Exceptions;

use Illuminate\Auth\Access\AuthorizationException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Throwable;

class Handler extends ExceptionHandler
{
    /**
     * A list of exception types with their corresponding custom log levels.
     *
     * @var array<class-string<\Throwable>, \Psr\Log\LogLevel::*>
     */
    protected $levels = [
        //
    ];

    /**
     * A list of the exception types that are not reported.
     *
     * @var array<int, class-string<\Throwable>>
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed to the session on validation exceptions.
     *
     * @var array<int, string>
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
    public function register(): void
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }

    private $messages = [
        400 => 'La richiesta non era corretta.',
        403 => 'Non sei autorizzato per accedere a questa pagina.',
        404 => 'La pagina che stai cercando non esiste.',
        419 => 'Questa sessione Ã¨ scaduta.',
    ];

    public function render($request, Throwable $e)
    {
        $code = method_exists($e, 'getStatusCode') ? $e->getStatusCode() : 500;
        if($e instanceof AuthorizationException)
            $code=403;

        if (key_exists($code, $this->messages))
            return response()->view('errors.error',
                ['code' => $code, 'subtitle' => $this->messages[$code]], $code);

        return parent::render($request, $e); // TODO: Change the autogenerated stub
    }


}
